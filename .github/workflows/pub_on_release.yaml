name: Publish on Docker Hub and Deploy

on:
  release:
    types: [published]

jobs:
  run_pub_tests:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: echo workspace
        run: echo $GITHUB_WORKSPACE
        shell: bash
      - name: Run tests
        run: |
          pip install coverage
          coverage run -m unittest discover
      - name: Tests report
        run: coverage report

  build_and_pub:
    needs: [run_pub_tests]
    runs-on: [ubuntu-latest]
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
    steps:
      - name: Login to docker.io
        run:  echo ${{ secrets.DOCKER_PWD }} | docker login --username ${{ secrets.DOCKER_LOGIN }} --password-stdin
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build -t $LOGIN/$NAME:${GITHUB_REF:10} -f Dockerfile .
      - name: Push image tag to docker.io
        run: docker push $LOGIN/$NAME:${GITHUB_REF:10}
      - name: Tag last release as latest
        run: docker tag $LOGIN/$NAME:${GITHUB_REF:10} $LOGIN/$NAME:latest
      - name: Push image tag latest to docker.io
        run: docker push $LOGIN/$NAME:latest

  # deploy:
  #   needs: [build_and_pub]
  #   runs-on: [ubuntu-latest]
  #   steps:
  #     - name: Deploy to server
  #       uses: appleboy/ssh-action@v0.1.3
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_KEY }}
  #         port: ${{ secrets.DEPLOY_PORT }}
  #         script: |
  #           docker pull $LOGIN/$NAME:latest
  #           docker stop ${{ secrets.DOCKER_NAME }} || true
  #           docker rm ${{ secrets.DOCKER_NAME }} || true
  #           docker run -d --name ${{ secrets.DOCKER_NAME }} -p 80:80 $LOGIN/$NAME:latest