name: Run tests on any Push event
on:
  push:
    tags:
      - '!refs/tags/*'
    branches:
      - '*'
jobs:
  run_tests:
    runs-on: [ubuntu-latest]
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
          MYSQL_USER: root
          MYSQL_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    strategy:
      matrix:
        python-version: [3.12]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for MySQL to be ready
        run: |
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for database connection..."
            sleep 2
          done
      - name: Load environment variables
        run: cp .env.example .env
      - name: Start Flask server
        run: |
          nohup flask run --host=0.0.0.0 --port=5000 &
          sleep 5  # Give the server some time to start
        env:
          FLASK_APP: main
          FLASK_ENV: development
          FLASK_DEBUG: 1
          MYSQL_HOST: 127.0.0.1
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_DB: test
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
      - name: Run tests
        run: |
          pip install coverage
          coverage run -m unittest discover -s tests/unit -p 'test_*.py'
      - name: Tests report
        run: coverage report
      - name: Hello world action step
        id: hello
        uses: ozada/test-action@v1
        with:
          who-to-greet: 'Mike Odnis'
      - name: Get the output time
        run: echo "The time was ${{ steps.hello.outputs.time }}"